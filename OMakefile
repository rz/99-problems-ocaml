# ocamlfind is required
USE_OCAMLFIND = true

if $(not $(OCAMLFIND_EXISTS))
   eprintln(This project requires ocamlfind\, but it was not found.)
   exit 1

OCAMLFLAGS [] =
	-thread # this is so that Core can be included in OCAMLPACKS below (?)

# package names to pass to ocamlfind
OCAMLPACKS[] =
	oUnit
	Core # so that we can do open Core.std

# compile native or byte code?
NATIVE_ENABLED = $(OCAMLOPT_EXISTS)
BYTE_ENABLED = $(not $(OCAMLOPT_EXISTS))

# problem dirs which should contain solutions (e.g. p01.ml) and tests.ml
PROBLEM_DIRS[] =
	01-working-with-lists

# build and run tests for each problem dir
.SUBDIRS: $(PROBLEM_DIRS)
	TEST_PROG = $(file tests)
	if $(file-exists $(addsuffix .ml, $(TEST_PROG)))
		.PHONY: test clean

		SOLUTION_FILES = $(removesuffix $(filter p%.ml, $(ls .)))

		test: $(OCamlProgram $(TEST_PROG), $(TEST_PROG) $(SOLUTION_FILES))
			./$(TEST_PROG)

		clean:
			rm -f *.cmx *.cmi *.o *.cache *.log
			rm -f $(TEST_PROG)
			rm -f $(addsuffixes .opt .run, $(TEST_PROG))
			rm -f ../*.omc
		.DEFAULT: test

